#!/usr/bin/env python3
from decision_trees import MedicalDecisionTree
from singlestore_client import SingleStoreMed
from ai_enhancer import AIEnhancer
import os
import time
import logging
from dotenv import load_dotenv

# Configura√ß√£o
load_dotenv()
logging.basicConfig(
    filename='medical_system.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def clear_screen():
    """Limpa o terminal de forma multiplataforma"""
    os.system('cls' if os.name == 'nt' else 'clear')

def display_banner():
    """Exibe o banner do sistema"""
    clear_screen()
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë   SISTEMA DE TRIAGEM M√âDICA AVAN√áADA     ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë  Combina:                                ‚ïë
    ‚ïë  ‚Ä¢ √Årvores de decis√£o cl√≠nica            ‚ïë
    ‚ïë  ‚Ä¢ Protocolos m√©dicos (SingleStore)      ‚ïë
    ‚ïë  ‚Ä¢ IA generativa (Gemini 1.5 Flash)      ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)

def get_user_input():
    """Obt√©m e valida entrada do usu√°rio"""
    print("\n" + "‚ïê"*50)
    print("‚ÑπÔ∏è  Descreva seus sintomas principais (ex: 'dor de cabe√ßa intensa com n√°useas')")
    symptoms = input("> Sintomas: ").strip()
    
    while len(symptoms.split()) < 3:
        print("‚ö†Ô∏è  Por favor, forne√ßa mais detalhes (m√≠nimo 3 palavras)")
        symptoms = input("> Sintomas: ").strip()

    print("\n‚ÑπÔ∏è  Hist√≥rico m√©dico relevante (deixe em branco se n√£o souber)")
    history = input("> Hist√≥rico: ").strip() or "N√£o informado"

    print("\n‚ÑπÔ∏è  Idade (digite 0 se n√£o quiser informar)")
    while True:
        try:
            age = int(input("> Idade: ") or "0")
            if age >= 0:
                break
            print("‚ö†Ô∏è  Idade n√£o pode ser negativa")
        except ValueError:
            print("‚ö†Ô∏è  Por favor, digite um n√∫mero v√°lido")

    return symptoms, history, age

def display_results(diagnosis, medical_info, ai_response):
    """Mostra os resultados formatados"""
    print("\n" + "‚ïê"*50)
    print("üîç RESULTADOS DA TRIAGEM")
    print("‚ïê"*50)
    
    # Diagn√≥stico
    print(f"\nüìå Categoria: {diagnosis['category'].upper()}")
    print(f"üö® N√≠vel de Urg√™ncia: {diagnosis['urgency']}")
    
    if diagnosis['alerts']:
        print("\n‚ö†Ô∏è  ALERTAS CL√çNICOS:")
        for alert in diagnosis['alerts']:
            print(f"    ‚Ä¢ {alert}")
    
    # Informa√ß√µes m√©dicas
    if medical_info['relevant_info']:
        print("\nüìö INFORMA√á√ïES RELEVANTES:")
        for idx, info in enumerate(medical_info['relevant_info'][:3], 1):
            print(f"\n{idx}. [Confian√ßa: {info['confidence']}]")
            print(f"{info['text'][:200]}...")
    else:
        print("\n‚ÑπÔ∏è  Nenhuma informa√ß√£o espec√≠fica encontrada")
    
    # Fontes
    if medical_info['sources']:
        print("\nüìÑ Fontes consultadas:")
        for source in medical_info['sources']:
            print(f"  - {os.path.basename(source)}")

    # IA
    if ai_response:
        print("\n" + "‚ïê"*50)
        print("üß† EXPLICA√á√ÉO DO SISTEMA")
        print("‚ïê"*50)
        print(f"\n{ai_response}")

    # Recomenda√ß√£o
    print("\n" + "‚ïê"*50)
    print("‚ö†Ô∏è  RECOMENDA√á√ÉO FINAL")
    print("‚ïê"*50)
    print(f"\n{medical_info['recommendation']}")

def main():
    try:
        # Inicializa√ß√£o
        display_banner()
        symptoms, history, age = get_user_input()
        
        # Componentes do sistema
        tree = MedicalDecisionTree()
        db = SingleStoreMed()
        ai = AIEnhancer()

        # Processamento
        print("\n‚è≥ Analisando sintomas com √°rvore de decis√£o...")
        diagnosis = tree.evaluate(symptoms, history, age)
        time.sleep(1)  # Feedback visual

        print("‚è≥ Consultando protocolos m√©dicos...")
        medical_info = db.get_medical_info(
            specialty_id=diagnosis['specialty_id'],
            user_query=symptoms
        )
        time.sleep(0.5)

        print("‚è≥ Gerando explica√ß√£o com IA...")
        ai_response = ai.enhance_response(
            diagnosis=diagnosis,
            medical_info=medical_info,
            symptoms=symptoms
        )
        time.sleep(0.5)

        # Exibi√ß√£o
        display_results(diagnosis, medical_info, ai_response)

    except KeyboardInterrupt:
        print("\n‚ùå Opera√ß√£o cancelada pelo usu√°rio")
    except Exception as e:
        logging.error(f"Erro cr√≠tico: {str(e)}", exc_info=True)
        print(f"\n‚ö†Ô∏è  Erro no sistema: {str(e)}")
    finally:
        print("\n" + "‚ïê"*50)
        print("‚ÑπÔ∏è  Lembre-se: Este sistema n√£o substitui avalia√ß√£o m√©dica presencial")
        print("¬© 2024 Sistema de Triagem M√©dica - Vers√£o Terminal")

if __name__ == "__main__":
    main()